package team.one.lwe.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import team.one.lwe.bean.AvatarCache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "AVATAR_CACHE".
 */
public class AvatarCacheDao extends AbstractDao<AvatarCache, Void> {

    public static final String TABLENAME = "AVATAR_CACHE";

    public AvatarCacheDao(DaoConfig config) {
        super(config);
    }


    public AvatarCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"AVATAR_CACHE\" (" + //
                "\"ACCOUNT\" TEXT UNIQUE ," + // 0: account
                "\"AVATAR\" TEXT);"); // 1: avatar
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AVATAR_CACHE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AvatarCache entity) {
        stmt.clearBindings();

        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(1, account);
        }

        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AvatarCache entity) {
        stmt.clearBindings();

        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(1, account);
        }

        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public AvatarCache readEntity(Cursor cursor, int offset) {
        AvatarCache entity = new AvatarCache( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // account
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // avatar
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, AvatarCache entity, int offset) {
        entity.setAccount(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAvatar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    @Override
    protected final Void updateKeyAfterInsert(AvatarCache entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(AvatarCache entity) {
        return null;
    }

    @Override
    public boolean hasKey(AvatarCache entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity AvatarCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Account = new Property(0, String.class, "account", false, "ACCOUNT");
        public final static Property Avatar = new Property(1, String.class, "avatar", false, "AVATAR");
    }

}
